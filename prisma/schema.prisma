// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          String         @default("USER")
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comment[]
    refreshTokens RefreshToken[]
    deviceInfos   DeviceInfo[]
    loginAttempt  LoginAttempt[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String    @id @default(cuid())
    title     String
    content   String
    published Boolean   @default(false)
    authorId  String
    author    User      @relation(fields: [authorId], references: [id])
    tags      PostTag[] // 多对多关系
    comments  Comment[] // 文章的评论
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    authorId  String
    author    User     @relation(fields: [authorId], references: [id])
    postId    String
    post      Post     @relation(fields: [postId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id        String    @id @default(cuid())
    name      String    @unique // 标签名称
    posts     PostTag[] // 多对多关系
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model PostTag {
    id        String   @id @default(cuid())
    postId    String
    tagId     String
    post      Post     @relation(fields: [postId], references: [id])
    tag       Tag      @relation(fields: [tagId], references: [id])
    createdAt DateTime @default(now())
}

model RefreshToken {
    id        String   @id @default(cuid())
    token     String   @unique @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires   DateTime
    createdAt DateTime @default(now())
}

model DeviceInfo {
    id           String   @id @default(cuid())
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    fingerprint  String // 设备指纹
    userAgent    String // 浏览器信息
    lastIp       String // 最后登录IP
    lastLocation String? // 最后登录地理位置
    isBlocked    Boolean  @default(false)
    lastLoginAt  DateTime @default(now())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@unique([userId, fingerprint])
}

model LoginAttempt {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    ip        String
    location  String?
    userAgent String
    status    String // SUCCESS, FAILED, BLOCKED
    createdAt DateTime @default(now())
}

model BlockedToken {
    id        String   @id @default(cuid())
    token     String   @unique
    reason    String
    expiresAt DateTime
    createdAt DateTime @default(now())
}
